# ðŸ“‚ OrganizaÃ§Ã£o Completa do Projeto de Trading Bot
# ===============================================

project_root/
â”œâ”€â”€ trading_bot/
â”‚   â”œâ”€â”€ config.py                # ConfiguraÃ§Ãµes globais do sistema âœ… (Atualizado)
â”‚   â”‚
â”‚   â”œâ”€â”€ db/
â”‚   â”‚   â”œâ”€â”€ âœ…db_manager.py        # Gerencia banco de dados SQLite ðŸ“‚ (FEITO)
â”‚   â”‚   â””â”€â”€ âœ…data_manager.py      # Baixa, processa e armazena dados ðŸ“‚ (Ajustado)
â”‚   â”‚
â”‚   â”œâ”€â”€ models/
â”‚   â”‚   â”œâ”€â”€ âœ…informer.py          # Modelo Informer (TendÃªncia)
â”‚   â”‚   â”œâ”€â”€ âœ…patchtst.py          # Modelo PatchTST (MÃ©dio Prazo)
â”‚   â”‚   â”œâ”€â”€ âœ…lstm.py              # Modelo LSTM (Scalping)
â”‚   â”‚   â””â”€â”€ âœ…ensemble.py          # Sistema de Ensemble âœ… (Novo)
â”‚   â”‚   â”œâ”€â”€ âœ…ppo.py      # GestÃ£o de risco adaptativa âœ… (Novo)
â”‚   â”‚
â”‚   â”œâ”€â”€ utils/
â”‚   â”‚   â”œâ”€â”€ âœ…logger.py            # Sistema de logs âœ… (Novo)
â”‚   â”‚   â”œâ”€â”€ âœ…risk_manager.py      # GestÃ£o de risco adaptativa âœ… (Novo)
â”‚   â”‚   â”œâ”€â”€ âœ…backtester.py        # Simulador de Backtest âœ… (Novo)
â”‚   â”‚   â””â”€â”€ âœ…regime_classifier.py # ClassificaÃ§Ã£o de regimes (XGBoost) âœ… (Novo)
â”‚   â”‚
|   â”œâ”€â”€ validators/
â”‚       â”œâ”€â”€ regime_classifier.py     # Classificador de regime (XGBoost)
â”‚       â””â”€â”€ error_analyzer.py        # Analisador de erros pÃ³s-backtest
â”‚   â”œâ”€â”€ retrainer/
â”‚   â”‚   â””â”€â”€ retrainer.py         # Sistema de Re-Treino com proteÃ§Ã£o contra overfitting âœ… (Novo)
â”‚   â”‚
â”‚   â””â”€â”€ main.py                  # Script principal: Executa todo o pipeline âœ… (Novo)
â”‚
â””â”€â”€ logs/                        # DiretÃ³rio para armazenar logs de execuÃ§Ã£o e treinamento
    â””â”€â”€ trading_bot.log

# âœ… DescriÃ§Ã£o dos Principais MÃ³dulos:
# - config.py: Centraliza todas as configuraÃ§Ãµes do bot.
# - ensemble.py: Combina previsÃµes de Informer, PatchTST e LSTM.
# - regime_classifier.py: Classifica regimes de mercado com XGBoost.
# - backtester.py: Executa backtests e calcula mÃ©tricas.
# - retrainer.py: Re-treina modelos com proteÃ§Ã£o contra overfitting.

# ðŸš€ Pronto para integrar e executar! âœ…
