# trading_bot/utils/capital_manager.py
# M√≥dulo respons√°vel pela gest√£o de capital, incluindo alavancagem din√¢mica, gest√£o de lucros e controle de risco.

def adjust_leverage(prediction_confidence):
    """
    Ajusta a alavancagem automaticamente com base na confian√ßa da previs√£o.
    """
    if prediction_confidence > 95:
        leverage = 80
    elif 85 < prediction_confidence <= 95:
        leverage = 50
    elif 75 < prediction_confidence <= 85:
        leverage = 30
    else:
        leverage = 20
    
    print(f"üìà Confian√ßa: {prediction_confidence:.2f}% | Alavancagem ajustada para: {leverage}x")
    return leverage

def manage_profit(trade_result, leverage):
    """
    Separa 5% do lucro para saque e reinveste o restante, considerando a alavancagem.
    """
    profit = trade_result.get("pnl", 0)
    if profit > 0:
        withdraw_amount = profit * 0.05  # 5% para saque
        reinvest_amount = (profit - withdraw_amount) * (leverage / 20)  # Ajuste com base na alavancagem m√≠nima de 20x
        print(f"üí∞ Lucro: {profit:.2f} USDT | Saque: {withdraw_amount:.2f} USDT | Reinvestindo: {reinvest_amount:.2f} USDT")
    else:
        reinvest_amount = 0
    return reinvest_amount

def check_risk_management(balance, max_loss=-500, max_gain=1000):
    """
    Verifica se o risco do trade est√° dentro dos limites aceit√°veis.
    Se o saldo atingir o limite de perda ou atingir a meta di√°ria de lucro, bloqueia novas opera√ß√µes.
    """
    if balance <= max_loss:
        print(f"üö® STOP! Perda di√°ria atingida: {balance} USDT. Interrompendo opera√ß√µes.")
        return False
    if balance >= max_gain:
        print(f"‚úÖ Meta di√°ria atingida: {balance} USDT. Parando opera√ß√µes para garantir lucro.")
        return False
    return True
